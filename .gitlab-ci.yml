variables:
  DOCKER_HUB_IMAGE: "${DOCKER_HUB_USERNAME}/${CI_PROJECT_NAME}"
  VERSION: "4.0.12.2823"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

stages:
- prepare
- test
- build

source-check:
  artifacts:
    reports:
      dotenv: source.env
  image:
    name: curlimages/curl:8.11.1
    entrypoint:
    - /bin/sh
  script:
  - main=$(curl --head --output /dev/null --silent --write-out "%{http_code}" "https://github.com/Sonarr/Sonarr/releases/download/v${VERSION}/Sonarr.main.${VERSION}.linux-x64.tar.gz")
  - test "${main}" == "404" && echo "SOURCE_CHANNEL=develop" >> source.env || echo "SOURCE_CHANNEL=main" >> source.env
  - test "${main}" == "404" && echo "IMAGE_SUFFIX=-pre" >> source.env || echo "IMAGE_SUFFIX=" >> source.env
  stage: prepare
  tags:
  - kubernetes

kaniko-check:
  dependencies:
  - source-check
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  rules:
  - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  script:
  - /kaniko/executor --build-arg="SOURCE_CHANNEL=${SOURCE_CHANNEL}" --build-arg="VERSION=${VERSION}" --context="${CI_PROJECT_DIR}" --dockerfile="${CI_PROJECT_DIR}/Dockerfile" --no-push
  stage: test
  tags:
  - kubernetes

kaniko:
  dependencies:
  - source-check
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  rules:
  - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  script:
  - mkdir --parents /kaniko/.docker
  - |
    echo "{
      \"auths\": {
        \"${CI_REGISTRY}\": {
          \"username\": \"${CI_REGISTRY_USER}\",
          \"password\":\"${CI_REGISTRY_PASSWORD}\"
        },
        \"${DOCKER_HUB_URL}\": {
          \"username\": \"${DOCKER_HUB_USERNAME}\",
          \"password\":\"${DOCKER_HUB_PASSWORD}\"
        }
      }
    }" > /kaniko/.docker/config.json
  - /kaniko/executor --build-arg="SOURCE_CHANNEL=${SOURCE_CHANNEL}" --build-arg="VERSION=${VERSION}" --context="${CI_PROJECT_DIR}" --destination="${CI_REGISTRY_IMAGE}:${VERSION}.${CI_PIPELINE_IID}${IMAGE_SUFFIX}" --destination="${DOCKER_HUB_IMAGE}:${VERSION}.${CI_PIPELINE_IID}${IMAGE_SUFFIX}" --dockerfile="${CI_PROJECT_DIR}/Dockerfile"
  - echo "Successfully published new image ${CI_REGISTRY_IMAGE}:${VERSION}.${CI_PIPELINE_IID}${IMAGE_SUFFIX}"
  - echo "Successfully published new image ${DOCKER_HUB_IMAGE}:${VERSION}.${CI_PIPELINE_IID}${IMAGE_SUFFIX}"
  stage: build
  tags:
  - kubernetes
